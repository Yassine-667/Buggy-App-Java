stages:
  - Dockerfile linting   
  - Secret Detecting    
  - Sast and Code quality
  - SCA
  - build and push
  - Container Scanning
  - Infrastructure as Code scanning
  - Deploy on pre-production env
  - Web app/server compliance and security testing
  - Network discovery and security auditing
  - api_testing

hadolint:
   stage: Dockerfile linting
   tags:
     - inetum_runner_ec2
   image:
     name: hadolint/hadolint:v1.18.1-alpine
   services:
     - name: docker:26.1.3-dind
       alias: docker
   script:
     - hadolint --no-fail Dockerfile > linting_report.txt || true
   artifacts:
     paths:
       - linting_report.txt
   allow_failure: true


trufflehog:
  stage: Secret Detecting
  image: python:3.8
  tags:
    - inetum_runner_ec2
  variables:
    SCAN_TYPE : Trufflehog Scan
  before_script:
    - pip install trufflehog
  script:
    - trufflehog --regex . . > secret_detection.json || true
    - json_content=$(cat test.json)
    - echo $json_content
    - 'curl -X POST -H "Authorization: Token $DEFECTDOJO_TOKEN" -H "Content-Type: application/json" -d "{\"json\": $json_content, \"scan_type\": \"Trufflehog Scan\", \"engagement\": 1,\"minimum_severity\": \"Info\", \"active\": true, \"verified\": true}" http://13.38.200.191:8080/api/v2/import-scan/'
    - 'curl -X POST -H "Authorization: Token $DEFECTDOJO_TOKEN" -H "Content-Type: multipart/form-data" -d "{\"json\": $json_content, \"scan_type\": \"Trufflehog3 Scan\", \"engagement\": 1,\"minimum_severity\": \"Info\", \"active\": true, \"verified\": true}" http://13.38.200.191:8080/api/v2/import-scan/ -v'
    - 'curl -X POST -H "Authorization: Token $DEFECTDOJO_TOKEN" -F "json=@test.json" -F "scan_type=Trufflehog Scan" -F "engagement=1" -F "minimum_severity=Info" -F "active=true" -F "verified=true" http://13.38.200.191:8080/api/v2/import-scan/ -v'



secret_detecting:
   stage: Secret Detecting
   image: python:3.8
   tags:
       - inetum_runner_ec2
   services:
     - name: python
   variables:
     SCAN_TYPE : Detect-secrets Scan
   before_script:
     - pip install detect-secrets
     - pip install requests
     - sed -i "s/scan_type_value/$SCAN_TYPE/g" ./import_scan_to_defectdojo.py
     - sed -i "s/DEFECTDOJO_TOKEN/$DEFECTDOJO_TOKEN/g" ./import_scan_to_defectdojo.py
     - sed -i "s/file_to_import/secrets_detecting.json/g" ./import_scan_to_defectdojo.py
   script:
     - detect-secrets scan --all-files > secrets_detecting.json
     - python import_scan_to_defectdojo.py
   artifacts:
     paths:
       - secrets_detecting.json
   allow_failure: true

Sonarqube:
   image: maven:3.6.3-jdk-11
   stage: Sast and Code quality
   tags: 
     - inetum_runner_ec2
   variables:
     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" 
     GIT_DEPTH: "0"
   cache:
     key: "${CI_JOB_NAME}"
     paths:
       - .sonar/cache
   script: 
     - mvn verify sonar:sonar -Dsonar.projectKey=yassine-lazrak_devsecops-plateform_AY-Wl34izmCzeIyI2eSZ
   allow_failure: true

Owasp_dependency_check:
   stage: SCA
   image: maven:3.8.3-jdk-11
   tags:
       - inetum_runner_ec2
   variables:
     SCAN_TYPE : Dependency Check Scan
   services:
     - name: python
   before_script:
     - pip install requests
     - sed -i "s/scan_type_value/$SCAN_TYPE/g" ./import_scan_to_defectdojo.py
     - sed -i "s/DEFECTDOJO_TOKEN/$DEFECTDOJO_TOKEN/g" ./import_scan_to_defectdojo.py
   script:
      #Download and install Dependency-Check CLI
     - wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
     - unzip dependency-check-9.2.0-release.zip
      #Execute Dependency-Check scan
     - ./dependency-check/bin/dependency-check.sh --scan . --format ALL --failOnCVSS 8 > Dependency-check.json
     - python import_scan_to_defectdojo.py
   artifacts:
     paths:
       - Dependency-check.json
   allow_failure: true

Build Push to gitlab registry:   
   stage: build and push
   image: docker:latest
   tags:
    - inetum_runner_ec2
   services:
    - docker:dind
   before_script:
     - unset DOCKER_HOST
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $GITLAB_CI_REGISTRY
   script:
     - echo "Docker Build"
     - docker build -t registry.gitlab.com/yassine-lazrak/devsecops-plateform .
     - docker push registry.gitlab.com/yassine-lazrak/devsecops-plateform

trivy:
   stage: Container Scanning
   image: docker:stable
   tags:
     - inetum_runner_ec2
   services:
     - name: docker:dind
       entrypoint: ["env", "-u", "DOCKER_HOST"]
       command: ["dockerd-entrypoint.sh"]
   variables:
     DOCKER_HOST: tcp://docker:2375/
     DOCKER_DRIVER: overlay2
     DOCKER_TLS_CERTDIR: ""
     IMAGE: $CI_REGISTRY_IMAGE:latest
   before_script:
     - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
     - echo $TRIVY_VERSION
     - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
   script:
     - ./trivy image -o trivy-container-scanning-report.json $IMAGE
   artifacts:
     reports:
       container_scanning: trivy-container-scanning-report.json
   allow_failure: true

Checkov:
   stage: Infrastructure as Code scanning
   image: python:3.8
   tags: 
     - inetum_runner_ec2
   variables:
     SCAN_TYPE : Checkov Scan
   before_script:
     - pip install requests
     - sed -i "s/scan_type_value/$SCAN_TYPE/g" ./import_scan_to_defectdojo.py
     - sed -i "s/DEFECTDOJO_TOKEN/$DEFECTDOJO_TOKEN/g" ./import_scan_to_defectdojo.py
     - sed -i "s/file_to_import/checkov-results.json/g" ./import_scan_to_defectdojo.py
   script:
     - echo "Running Checkov Security Scan"
     - python -m venv .venv
     - source .venv/bin/activate
     - pip install --upgrade pip
     - pip install checkov
     - checkov --directory=. -o json > checkov-results.json || true
     - python import_scan_to_defectdojo.py
   artifacts:
     paths:
       - checkov-results.json
   allow_failure: true

Deploy:
   stage: Deploy on pre-production env
   image: alpine:latest
   tags:
     - inetum_runner_ec2
   before_script:
     - apk add --no-cache curl
     - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
     - chmod +x kubectl
     - mv kubectl /usr/local/bin/
   script:
     - kubectl config set-cluster Kubernetes --server=$KUBE_SERVER
     - kubectl config set-credentials gitlab --token=$KUBE_TOKEN
     - kubectl config set-context $KUBE_CONTEXT --cluster=Kubernetes --user=gitlab
     - kubectl config use-context $KUBE_CONTEXT
     - |
       if kubectl get pods buggy-app; then
         echo "Pod buggy-app already exists. Skipping creation."
       else
         kubectl run buggy-app --image=registry.gitlab.com/yassine-lazrak/devsecops-plateform:latest --insecure-skip-tls-verify || true
       fi

DAST:
   stage: Web app/server compliance and security testing
   image:
     name: zaproxy/zap-stable
   tags:
    - inetum_runner_ec2
   before_script:
     - mkdir -p /zap/wrk
   script:
       # -cmd -autorun /wap/wrk/app/wap_auth.yaml
     - zap-full-scan.py -t "http://15.236.220.175:31170" -g gen.conf -I -r Dast_report.html 
     - cp /zap/wrk/Dast_report.html Dast_report.html
   artifacts:
     when: always
     paths:
       - zap.out
       - Dast_report.html
   allow_failure: true

Nikto:
   stage: Web app/server compliance and security testing
   tags:
     - inetum_runner_ec2
   image: 
     name: docker:latest
   services:
     - name: docker:26.1.3-dind
       alias: docker
     - name: python:3.8
   variables:
     SCAN_TYPE : Nikto Scan
   before_script:
     - pip install requests
     - sed -i "s/scan_type_value/$SCAN_TYPE/g" ./import_scan_to_defectdojo.py
     - sed -i "s/DEFECTDOJO_TOKEN/$DEFECTDOJO_TOKEN/g" ./import_scan_to_defectdojo.py
     - sed -i "s/file_to_import/nikto-output.html/g" ./import_scan_to_defectdojo.py
   script:
     - git clone https://github.com/sullo/nikto.git
     - apk update && apk add perl
     - cd nikto/program  #-C all
     - ./nikto.pl -h http://15.236.220.175:31170 -Format html -o nikto-output.html || true
     - cd ../..
     - python import_scan_to_defectdojo.py
   artifacts:
     paths:
       - /nikto/program/nikto-output.html
   allow_failure: true

Nmap:
   stage: Network discovery and security auditing
   tags:
     - inetum_runner_ec2
   image: securecodebox/nmap:7.80-2
   services:
      - name: docker:26.1.3-dind
        alias: docker
   script:
     - nmap -p 1-65535 -T4 -A -sC -v 15.236.220.175 > nmap_scan.txt || true
   artifacts:
     paths:
       - nmap_scan.txt
   allow_failure: true


defectdojo_Vuln_management:
   stage: import artifacts to defectdojo
   image: python
   variables:
     SCAN_TYPE: "Trivy Scan"
   before_script:
     - pip install requests
     - sed -i "s/scan_type_value/$SCAN_TYPE/g" ./import_scan_to_defectdojo.py
     - sed -i "s/DEFECTDOJO_TOKEN/$DEFECTDOJO_TOKEN/g" ./import_scan_to_defectdojo.py
   script:
     - python import_scan_to_defectdojo.py